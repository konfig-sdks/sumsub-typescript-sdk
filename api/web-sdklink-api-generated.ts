/* tslint:disable */
/* eslint-disable */
/*
Sumsub API

Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.

Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * WebSDKLinkApi - axios parameter creator
 * @export
 */
export const WebSDKLinkApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a link to WebSDK for the specified applicant.
         * @summary Generate external WebSDK link
         * @param {string} levelName A [verification level](https://docs.sumsub.com/reference) name. Case-sensitive and has to be created in the same environment. If contains reserved characters (e.g., &#x60;@&#x60;, &#x60;+\&quot;&#x60;, white spaces as &#x60;%20&#x60;), it should be URL-encoded, otherwise you may get signature mismatch.
         * @param {number} [ttlInSecs] A lifespan of the link in seconds.
         * @param {string} [externalUserId] An external user ID on your side.
         * @param {string} [lang] The language for WebSDK in ISO 639-1 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateExternal: async (levelName: string, ttlInSecs?: number, externalUserId?: string, lang?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'levelName' is not null or undefined
            assertParamExists('generateExternal', 'levelName', levelName)
            const localVarPath = `/resources/sdkIntegrations/levels/{levelName}/websdkLink`
                .replace(`{${"levelName"}}`, encodeURIComponent(String(levelName !== undefined ? levelName : `-levelName-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-App-Token", keyParamName: "sec0", configuration })
            if (ttlInSecs !== undefined) {
                localVarQueryParameter['ttlInSecs'] = ttlInSecs;
            }

            if (externalUserId !== undefined) {
                localVarQueryParameter['externalUserId'] = externalUserId;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resources/sdkIntegrations/levels/{levelName}/websdkLink',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebSDKLinkApi - functional programming interface
 * @export
 */
export const WebSDKLinkApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebSDKLinkApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a link to WebSDK for the specified applicant.
         * @summary Generate external WebSDK link
         * @param {WebSDKLinkApiGenerateExternalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateExternal(requestParameters: WebSDKLinkApiGenerateExternalRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateExternal(requestParameters.levelName, requestParameters.ttlInSecs, requestParameters.externalUserId, requestParameters.lang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * WebSDKLinkApi - factory interface
 * @export
 */
export const WebSDKLinkApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebSDKLinkApiFp(configuration)
    return {
        /**
         * Creates a link to WebSDK for the specified applicant.
         * @summary Generate external WebSDK link
         * @param {WebSDKLinkApiGenerateExternalRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateExternal(requestParameters: WebSDKLinkApiGenerateExternalRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.generateExternal(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generateExternal operation in WebSDKLinkApi.
 * @export
 * @interface WebSDKLinkApiGenerateExternalRequest
 */
export type WebSDKLinkApiGenerateExternalRequest = {
    
    /**
    * A [verification level](https://docs.sumsub.com/reference) name. Case-sensitive and has to be created in the same environment. If contains reserved characters (e.g., `@`, `+\"`, white spaces as `%20`), it should be URL-encoded, otherwise you may get signature mismatch.
    * @type {string}
    * @memberof WebSDKLinkApiGenerateExternal
    */
    readonly levelName: string
    
    /**
    * A lifespan of the link in seconds.
    * @type {number}
    * @memberof WebSDKLinkApiGenerateExternal
    */
    readonly ttlInSecs?: number
    
    /**
    * An external user ID on your side.
    * @type {string}
    * @memberof WebSDKLinkApiGenerateExternal
    */
    readonly externalUserId?: string
    
    /**
    * The language for WebSDK in ISO 639-1 format.
    * @type {string}
    * @memberof WebSDKLinkApiGenerateExternal
    */
    readonly lang?: string
    
}

/**
 * WebSDKLinkApiGenerated - object-oriented interface
 * @export
 * @class WebSDKLinkApiGenerated
 * @extends {BaseAPI}
 */
export class WebSDKLinkApiGenerated extends BaseAPI {
    /**
     * Creates a link to WebSDK for the specified applicant.
     * @summary Generate external WebSDK link
     * @param {WebSDKLinkApiGenerateExternalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebSDKLinkApiGenerated
     */
    public generateExternal(requestParameters: WebSDKLinkApiGenerateExternalRequest, options?: AxiosRequestConfig) {
        return WebSDKLinkApiFp(this.configuration).generateExternal(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
