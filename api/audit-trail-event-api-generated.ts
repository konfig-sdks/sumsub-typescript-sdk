/* tslint:disable */
/* eslint-disable */
/*
Sumsub API

Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.

Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AuditTrailEventApi - axios parameter creator
 * @export
 */
export const AuditTrailEventApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns audit trail events.
         * @summary Audit trail events
         * @param {string} [subjectName] The name of the subject for which events are received. If the name is not specified, events are received for all subjects on the key.
         * @param {string} [activity] If specified, only events with this activity will be in the response.
         * @param {string} [from] From the date/time events are received (format yyyy-MM-dd HH:mm:ss, e.g. 2022-10-01 12:05:00). If it\&#39;s not specified - events are received from yesterday.
         * @param {string} [to] To the date/time events are received (format yyyy-MM-dd HH:mm:ss, e.g. 2022-10-01 12:15:00). If it\&#39;s not specified - events are received up to now.
         * @param {string} [limit] Max number of events in one request. Can\&#39;t be more than 20000. By default is 10.
         * @param {string} [offset] Allows to skip the offset events before beginning to return the events. By default is 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents: async (subjectName?: string, activity?: string, from?: string, to?: string, limit?: string, offset?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/resources/auditTrailEvents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-App-Token", keyParamName: "sec0", configuration })
            if (subjectName !== undefined) {
                localVarQueryParameter['subjectName'] = subjectName;
            }

            if (activity !== undefined) {
                localVarQueryParameter['activity'] = activity;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = to;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resources/auditTrailEvents',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuditTrailEventApi - functional programming interface
 * @export
 */
export const AuditTrailEventApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuditTrailEventApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns audit trail events.
         * @summary Audit trail events
         * @param {AuditTrailEventApiGetEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEvents(requestParameters: AuditTrailEventApiGetEventsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEvents(requestParameters.subjectName, requestParameters.activity, requestParameters.from, requestParameters.to, requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuditTrailEventApi - factory interface
 * @export
 */
export const AuditTrailEventApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuditTrailEventApiFp(configuration)
    return {
        /**
         * Returns audit trail events.
         * @summary Audit trail events
         * @param {AuditTrailEventApiGetEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEvents(requestParameters: AuditTrailEventApiGetEventsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getEvents(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getEvents operation in AuditTrailEventApi.
 * @export
 * @interface AuditTrailEventApiGetEventsRequest
 */
export type AuditTrailEventApiGetEventsRequest = {
    
    /**
    * The name of the subject for which events are received. If the name is not specified, events are received for all subjects on the key.
    * @type {string}
    * @memberof AuditTrailEventApiGetEvents
    */
    readonly subjectName?: string
    
    /**
    * If specified, only events with this activity will be in the response.
    * @type {string}
    * @memberof AuditTrailEventApiGetEvents
    */
    readonly activity?: string
    
    /**
    * From the date/time events are received (format yyyy-MM-dd HH:mm:ss, e.g. 2022-10-01 12:05:00). If it\'s not specified - events are received from yesterday.
    * @type {string}
    * @memberof AuditTrailEventApiGetEvents
    */
    readonly from?: string
    
    /**
    * To the date/time events are received (format yyyy-MM-dd HH:mm:ss, e.g. 2022-10-01 12:15:00). If it\'s not specified - events are received up to now.
    * @type {string}
    * @memberof AuditTrailEventApiGetEvents
    */
    readonly to?: string
    
    /**
    * Max number of events in one request. Can\'t be more than 20000. By default is 10.
    * @type {string}
    * @memberof AuditTrailEventApiGetEvents
    */
    readonly limit?: string
    
    /**
    * Allows to skip the offset events before beginning to return the events. By default is 0.
    * @type {string}
    * @memberof AuditTrailEventApiGetEvents
    */
    readonly offset?: string
    
}

/**
 * AuditTrailEventApiGenerated - object-oriented interface
 * @export
 * @class AuditTrailEventApiGenerated
 * @extends {BaseAPI}
 */
export class AuditTrailEventApiGenerated extends BaseAPI {
    /**
     * Returns audit trail events.
     * @summary Audit trail events
     * @param {AuditTrailEventApiGetEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuditTrailEventApiGenerated
     */
    public getEvents(requestParameters: AuditTrailEventApiGetEventsRequest = {}, options?: AxiosRequestConfig) {
        return AuditTrailEventApiFp(this.configuration).getEvents(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
