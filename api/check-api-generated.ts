/* tslint:disable */
/* eslint-disable */
/*
Sumsub API

Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.

Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CheckPerformNameCrossValidationRequest } from '../models';
// @ts-ignore
import { CheckPerformNameCrossValidationRequest1 } from '../models';
// @ts-ignore
import { CheckPerformNameCrossValidationRequestIdDocsInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CheckApi - axios parameter creator
 * @export
 */
export const CheckApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns company check results.
         * @summary Get additional company check data
         * @param {string} applicantId A unique applicant identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        additionalCompanyData: async (applicantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicantId' is not null or undefined
            assertParamExists('additionalCompanyData', 'applicantId', applicantId)
            const localVarPath = `/resources/checks/latest?type=COMPANY`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-App-Token", keyParamName: "sec0", configuration })
            if (applicantId !== undefined) {
                localVarQueryParameter['applicantId'] = applicantId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resources/checks/latest?type=COMPANY',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns PoA data.
         * @summary Get additional PoA data
         * @param {string} applicantId A unique applicant identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        additionalPoaData: async (applicantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicantId' is not null or undefined
            assertParamExists('additionalPoaData', 'applicantId', applicantId)
            const localVarPath = `/resources/checks/latest?type=POA`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-App-Token", keyParamName: "sec0", configuration })
            if (applicantId !== undefined) {
                localVarQueryParameter['applicantId'] = applicantId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resources/checks/latest?type=POA',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns email confirmation check results.
         * @summary Get email confirmation check results
         * @param {string} applicantId A unique applicant identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailConfirmationResults: async (applicantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicantId' is not null or undefined
            assertParamExists('emailConfirmationResults', 'applicantId', applicantId)
            const localVarPath = `/resources/checks/latest?type=EMAIL_CONFIRMATION`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-App-Token", keyParamName: "sec0", configuration })
            if (applicantId !== undefined) {
                localVarQueryParameter['applicantId'] = applicantId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resources/checks/latest?type=EMAIL_CONFIRMATION',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns IP check results.
         * @summary Get IP check results
         * @param {string} applicantId A unique applicant identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipCheckResults: async (applicantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicantId' is not null or undefined
            assertParamExists('ipCheckResults', 'applicantId', applicantId)
            const localVarPath = `/resources/checks/latest?type=IP_CHECK`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-App-Token", keyParamName: "sec0", configuration })
            if (applicantId !== undefined) {
                localVarQueryParameter['applicantId'] = applicantId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resources/checks/latest?type=IP_CHECK',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Performs a name cross validation.
         * @summary Perform name cross validation
         * @param {string} comparisonMode Data comparison mode. See the [possible values](/reference/perform-name-cross-validation#possible-comparisonmode-values).
         * @param {CheckPerformNameCrossValidationRequest} [checkPerformNameCrossValidationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performNameCrossValidation: async (comparisonMode: string, checkPerformNameCrossValidationRequest?: CheckPerformNameCrossValidationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'comparisonMode' is not null or undefined
            assertParamExists('performNameCrossValidation', 'comparisonMode', comparisonMode)
            const localVarPath = `/resources/checks/crossCheck?comparisonMode={comparisonMode}`
                .replace(`{${"comparisonMode"}}`, encodeURIComponent(String(comparisonMode !== undefined ? comparisonMode : `-comparisonMode-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
            const addFormParam = async (name: string, data: any, isBinary: boolean, isPrimitiveType: boolean) => {
                if (isBinary) {
                    if (data instanceof Uint8Array) {
                        // Handle Buffer data
                        const filetype = await fromBuffer(data)
                        const filename = filetype === undefined ? name : `${name}.${filetype.ext}`
                        localVarFormParams.append(name, data as any, filename);
                    } else if ("name" in data) {
                        // File instances in browsers and Node.js have the
                        // "name" property "Duck typing" files to handle browser
                        // File class or Node.js File class
                        // Web: https://developer.mozilla.org/en-US/docs/Web/API/File
                        // Node.js: https://nodejs.org/api/buffer.html#new-bufferfilesources-filename-options
                        if (isBrowser()) {
                            // FormData in browser can accept File/Blob directly
                            localVarFormParams.append(name, data, data.name);
                        } else {
                            // FormData in Node.js can only accept raw Buffer so convert before passing
                            const bytes = await data.arrayBuffer()
                            const buffer = Buffer.from(bytes)
                            localVarFormParams.append(name, buffer, data.name);
                        }
                    }
                } else {
                    if (isPrimitiveType) {
                        /**
                         * FormData can only accept string or Blob so we need to convert
                         * non-string primitives to string. We also need to convert
                         */
                        if (typeof data === "object") {
                          localVarFormParams.append(name, JSON.stringify(data));
                        } else {
                          localVarFormParams.append(name, data);
                        }
                    } else {
                        if (isBrowser()) {
                            localVarFormParams.append(name, new Blob([JSON.stringify(data)], { type: "application/json" }))
                        } else {
                            localVarFormParams.append(name, JSON.stringify(data), { type: "application/json", filename: "data.json" });
                        }
                    }
                }
            }
            if (!isBrowser()) Object.assign(localVarHeaderParameter, localVarFormParams.getHeaders());

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-App-Token", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;
            requestBeforeHook({
                requestBody: checkPerformNameCrossValidationRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resources/checks/crossCheck?comparisonMode={comparisonMode}',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns phone confirmation check results.
         * @summary Get phone confirmation check results
         * @param {string} applicantId A unique applicant identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneConfirmationResults: async (applicantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicantId' is not null or undefined
            assertParamExists('phoneConfirmationResults', 'applicantId', applicantId)
            const localVarPath = `/resources/checks/latest?type=PHONE_CONFIRMATION`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-App-Token", keyParamName: "sec0", configuration })
            if (applicantId !== undefined) {
                localVarQueryParameter['applicantId'] = applicantId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resources/checks/latest?type=PHONE_CONFIRMATION',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns TIN (SSN) check results.
         * @summary Get TIN (SSN) check results
         * @param {string} applicantId A unique applicant identification number.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tinSsnCheckResults: async (applicantId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'applicantId' is not null or undefined
            assertParamExists('tinSsnCheckResults', 'applicantId', applicantId)
            const localVarPath = `/resources/checks/latest?type=TIN`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-App-Token", keyParamName: "sec0", configuration })
            if (applicantId !== undefined) {
                localVarQueryParameter['applicantId'] = applicantId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resources/checks/latest?type=TIN',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CheckApi - functional programming interface
 * @export
 */
export const CheckApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CheckApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns company check results.
         * @summary Get additional company check data
         * @param {CheckApiAdditionalCompanyDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async additionalCompanyData(requestParameters: CheckApiAdditionalCompanyDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.additionalCompanyData(requestParameters.applicantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns PoA data.
         * @summary Get additional PoA data
         * @param {CheckApiAdditionalPoaDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async additionalPoaData(requestParameters: CheckApiAdditionalPoaDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.additionalPoaData(requestParameters.applicantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns email confirmation check results.
         * @summary Get email confirmation check results
         * @param {CheckApiEmailConfirmationResultsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async emailConfirmationResults(requestParameters: CheckApiEmailConfirmationResultsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.emailConfirmationResults(requestParameters.applicantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns IP check results.
         * @summary Get IP check results
         * @param {CheckApiIpCheckResultsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ipCheckResults(requestParameters: CheckApiIpCheckResultsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ipCheckResults(requestParameters.applicantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Performs a name cross validation.
         * @summary Perform name cross validation
         * @param {CheckApiPerformNameCrossValidationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async performNameCrossValidation(requestParameters: CheckApiPerformNameCrossValidationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const checkPerformNameCrossValidationRequest: CheckPerformNameCrossValidationRequest = {
                idDocs: requestParameters.idDocs
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.performNameCrossValidation(requestParameters.comparisonMode, checkPerformNameCrossValidationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns phone confirmation check results.
         * @summary Get phone confirmation check results
         * @param {CheckApiPhoneConfirmationResultsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async phoneConfirmationResults(requestParameters: CheckApiPhoneConfirmationResultsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.phoneConfirmationResults(requestParameters.applicantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns TIN (SSN) check results.
         * @summary Get TIN (SSN) check results
         * @param {CheckApiTinSsnCheckResultsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tinSsnCheckResults(requestParameters: CheckApiTinSsnCheckResultsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tinSsnCheckResults(requestParameters.applicantId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CheckApi - factory interface
 * @export
 */
export const CheckApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CheckApiFp(configuration)
    return {
        /**
         * Returns company check results.
         * @summary Get additional company check data
         * @param {CheckApiAdditionalCompanyDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        additionalCompanyData(requestParameters: CheckApiAdditionalCompanyDataRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.additionalCompanyData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns PoA data.
         * @summary Get additional PoA data
         * @param {CheckApiAdditionalPoaDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        additionalPoaData(requestParameters: CheckApiAdditionalPoaDataRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.additionalPoaData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns email confirmation check results.
         * @summary Get email confirmation check results
         * @param {CheckApiEmailConfirmationResultsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        emailConfirmationResults(requestParameters: CheckApiEmailConfirmationResultsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.emailConfirmationResults(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns IP check results.
         * @summary Get IP check results
         * @param {CheckApiIpCheckResultsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ipCheckResults(requestParameters: CheckApiIpCheckResultsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.ipCheckResults(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Performs a name cross validation.
         * @summary Perform name cross validation
         * @param {CheckApiPerformNameCrossValidationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        performNameCrossValidation(requestParameters: CheckApiPerformNameCrossValidationRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.performNameCrossValidation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns phone confirmation check results.
         * @summary Get phone confirmation check results
         * @param {CheckApiPhoneConfirmationResultsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        phoneConfirmationResults(requestParameters: CheckApiPhoneConfirmationResultsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.phoneConfirmationResults(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns TIN (SSN) check results.
         * @summary Get TIN (SSN) check results
         * @param {CheckApiTinSsnCheckResultsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tinSsnCheckResults(requestParameters: CheckApiTinSsnCheckResultsRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.tinSsnCheckResults(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for additionalCompanyData operation in CheckApi.
 * @export
 * @interface CheckApiAdditionalCompanyDataRequest
 */
export type CheckApiAdditionalCompanyDataRequest = {
    
    /**
    * A unique applicant identifier.
    * @type {string}
    * @memberof CheckApiAdditionalCompanyData
    */
    readonly applicantId: string
    
}

/**
 * Request parameters for additionalPoaData operation in CheckApi.
 * @export
 * @interface CheckApiAdditionalPoaDataRequest
 */
export type CheckApiAdditionalPoaDataRequest = {
    
    /**
    * A unique applicant identifier.
    * @type {string}
    * @memberof CheckApiAdditionalPoaData
    */
    readonly applicantId: string
    
}

/**
 * Request parameters for emailConfirmationResults operation in CheckApi.
 * @export
 * @interface CheckApiEmailConfirmationResultsRequest
 */
export type CheckApiEmailConfirmationResultsRequest = {
    
    /**
    * A unique applicant identifier.
    * @type {string}
    * @memberof CheckApiEmailConfirmationResults
    */
    readonly applicantId: string
    
}

/**
 * Request parameters for ipCheckResults operation in CheckApi.
 * @export
 * @interface CheckApiIpCheckResultsRequest
 */
export type CheckApiIpCheckResultsRequest = {
    
    /**
    * A unique applicant identifier.
    * @type {string}
    * @memberof CheckApiIpCheckResults
    */
    readonly applicantId: string
    
}

/**
 * Request parameters for performNameCrossValidation operation in CheckApi.
 * @export
 * @interface CheckApiPerformNameCrossValidationRequest
 */
export type CheckApiPerformNameCrossValidationRequest = {
    
    /**
    * Data comparison mode. See the [possible values](/reference/perform-name-cross-validation#possible-comparisonmode-values).
    * @type {string}
    * @memberof CheckApiPerformNameCrossValidation
    */
    readonly comparisonMode: string
    
} & CheckPerformNameCrossValidationRequest

/**
 * Request parameters for phoneConfirmationResults operation in CheckApi.
 * @export
 * @interface CheckApiPhoneConfirmationResultsRequest
 */
export type CheckApiPhoneConfirmationResultsRequest = {
    
    /**
    * A unique applicant identifier.
    * @type {string}
    * @memberof CheckApiPhoneConfirmationResults
    */
    readonly applicantId: string
    
}

/**
 * Request parameters for tinSsnCheckResults operation in CheckApi.
 * @export
 * @interface CheckApiTinSsnCheckResultsRequest
 */
export type CheckApiTinSsnCheckResultsRequest = {
    
    /**
    * A unique applicant identification number.
    * @type {string}
    * @memberof CheckApiTinSsnCheckResults
    */
    readonly applicantId: string
    
}

/**
 * CheckApiGenerated - object-oriented interface
 * @export
 * @class CheckApiGenerated
 * @extends {BaseAPI}
 */
export class CheckApiGenerated extends BaseAPI {
    /**
     * Returns company check results.
     * @summary Get additional company check data
     * @param {CheckApiAdditionalCompanyDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckApiGenerated
     */
    public additionalCompanyData(requestParameters: CheckApiAdditionalCompanyDataRequest, options?: AxiosRequestConfig) {
        return CheckApiFp(this.configuration).additionalCompanyData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns PoA data.
     * @summary Get additional PoA data
     * @param {CheckApiAdditionalPoaDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckApiGenerated
     */
    public additionalPoaData(requestParameters: CheckApiAdditionalPoaDataRequest, options?: AxiosRequestConfig) {
        return CheckApiFp(this.configuration).additionalPoaData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns email confirmation check results.
     * @summary Get email confirmation check results
     * @param {CheckApiEmailConfirmationResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckApiGenerated
     */
    public emailConfirmationResults(requestParameters: CheckApiEmailConfirmationResultsRequest, options?: AxiosRequestConfig) {
        return CheckApiFp(this.configuration).emailConfirmationResults(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns IP check results.
     * @summary Get IP check results
     * @param {CheckApiIpCheckResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckApiGenerated
     */
    public ipCheckResults(requestParameters: CheckApiIpCheckResultsRequest, options?: AxiosRequestConfig) {
        return CheckApiFp(this.configuration).ipCheckResults(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Performs a name cross validation.
     * @summary Perform name cross validation
     * @param {CheckApiPerformNameCrossValidationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckApiGenerated
     */
    public performNameCrossValidation(requestParameters: CheckApiPerformNameCrossValidationRequest, options?: AxiosRequestConfig) {
        return CheckApiFp(this.configuration).performNameCrossValidation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns phone confirmation check results.
     * @summary Get phone confirmation check results
     * @param {CheckApiPhoneConfirmationResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckApiGenerated
     */
    public phoneConfirmationResults(requestParameters: CheckApiPhoneConfirmationResultsRequest, options?: AxiosRequestConfig) {
        return CheckApiFp(this.configuration).phoneConfirmationResults(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns TIN (SSN) check results.
     * @summary Get TIN (SSN) check results
     * @param {CheckApiTinSsnCheckResultsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckApiGenerated
     */
    public tinSsnCheckResults(requestParameters: CheckApiTinSsnCheckResultsRequest, options?: AxiosRequestConfig) {
        return CheckApiFp(this.configuration).tinSsnCheckResults(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
