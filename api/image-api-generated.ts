/* tslint:disable */
/* eslint-disable */
/*
Sumsub API

Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.

Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ImageApi - axios parameter creator
 * @export
 */
export const ImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns document images.
         * @summary Get document images
         * @param {string} inspectionId An inspection identifier. This identifier is returned as a root field upon running [this API method](ref:get-applicant-data).
         * @param {string} imageId An image identifier. You can get this number by using [this API method](ref:get-applicant-verification-steps-status).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentImages: async (inspectionId: string, imageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inspectionId' is not null or undefined
            assertParamExists('getDocumentImages', 'inspectionId', inspectionId)
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('getDocumentImages', 'imageId', imageId)
            const localVarPath = `/resources/inspections/{inspectionId}/resources/{imageId}`
                .replace(`{${"inspectionId"}}`, encodeURIComponent(String(inspectionId !== undefined ? inspectionId : `-inspectionId-`)))
                .replace(`{${"imageId"}}`, encodeURIComponent(String(imageId !== undefined ? imageId : `-imageId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-App-Token", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resources/inspections/{inspectionId}/resources/{imageId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Marks uploaded images as deleted.
         * @summary Mark image as inactive
         * @param {string} inspectionId An inspection identifier. You can get this number by using [this API method](ref:get-applicant-data).
         * @param {string} imageId An image identifier. You can get this number by using [this API method](ref:get-applicant-verification-steps-status).
         * @param {boolean} [revert] Set &#x60;true&#x60; to revert inactivity of the image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAsInactive: async (inspectionId: string, imageId: string, revert?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inspectionId' is not null or undefined
            assertParamExists('markAsInactive', 'inspectionId', inspectionId)
            // verify required parameter 'imageId' is not null or undefined
            assertParamExists('markAsInactive', 'imageId', imageId)
            const localVarPath = `/resources/inspections/{inspectionId}/resources/{imageId}`
                .replace(`{${"inspectionId"}}`, encodeURIComponent(String(inspectionId !== undefined ? inspectionId : `-inspectionId-`)))
                .replace(`{${"imageId"}}`, encodeURIComponent(String(imageId !== undefined ? imageId : `-imageId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-App-Token", keyParamName: "sec0", configuration })
            if (revert !== undefined) {
                localVarQueryParameter['revert'] = revert;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resources/inspections/{inspectionId}/resources/{imageId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageApi - functional programming interface
 * @export
 */
export const ImageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImageApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns document images.
         * @summary Get document images
         * @param {ImageApiGetDocumentImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentImages(requestParameters: ImageApiGetDocumentImagesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentImages(requestParameters.inspectionId, requestParameters.imageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Marks uploaded images as deleted.
         * @summary Mark image as inactive
         * @param {ImageApiMarkAsInactiveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markAsInactive(requestParameters: ImageApiMarkAsInactiveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markAsInactive(requestParameters.inspectionId, requestParameters.imageId, requestParameters.revert, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ImageApi - factory interface
 * @export
 */
export const ImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImageApiFp(configuration)
    return {
        /**
         * Returns document images.
         * @summary Get document images
         * @param {ImageApiGetDocumentImagesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentImages(requestParameters: ImageApiGetDocumentImagesRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getDocumentImages(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Marks uploaded images as deleted.
         * @summary Mark image as inactive
         * @param {ImageApiMarkAsInactiveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAsInactive(requestParameters: ImageApiMarkAsInactiveRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.markAsInactive(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDocumentImages operation in ImageApi.
 * @export
 * @interface ImageApiGetDocumentImagesRequest
 */
export type ImageApiGetDocumentImagesRequest = {
    
    /**
    * An inspection identifier. This identifier is returned as a root field upon running [this API method](ref:get-applicant-data).
    * @type {string}
    * @memberof ImageApiGetDocumentImages
    */
    readonly inspectionId: string
    
    /**
    * An image identifier. You can get this number by using [this API method](ref:get-applicant-verification-steps-status).
    * @type {string}
    * @memberof ImageApiGetDocumentImages
    */
    readonly imageId: string
    
}

/**
 * Request parameters for markAsInactive operation in ImageApi.
 * @export
 * @interface ImageApiMarkAsInactiveRequest
 */
export type ImageApiMarkAsInactiveRequest = {
    
    /**
    * An inspection identifier. You can get this number by using [this API method](ref:get-applicant-data).
    * @type {string}
    * @memberof ImageApiMarkAsInactive
    */
    readonly inspectionId: string
    
    /**
    * An image identifier. You can get this number by using [this API method](ref:get-applicant-verification-steps-status).
    * @type {string}
    * @memberof ImageApiMarkAsInactive
    */
    readonly imageId: string
    
    /**
    * Set `true` to revert inactivity of the image.
    * @type {boolean}
    * @memberof ImageApiMarkAsInactive
    */
    readonly revert?: boolean
    
}

/**
 * ImageApiGenerated - object-oriented interface
 * @export
 * @class ImageApiGenerated
 * @extends {BaseAPI}
 */
export class ImageApiGenerated extends BaseAPI {
    /**
     * Returns document images.
     * @summary Get document images
     * @param {ImageApiGetDocumentImagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiGenerated
     */
    public getDocumentImages(requestParameters: ImageApiGetDocumentImagesRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).getDocumentImages(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Marks uploaded images as deleted.
     * @summary Mark image as inactive
     * @param {ImageApiMarkAsInactiveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiGenerated
     */
    public markAsInactive(requestParameters: ImageApiMarkAsInactiveRequest, options?: AxiosRequestConfig) {
        return ImageApiFp(this.configuration).markAsInactive(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
