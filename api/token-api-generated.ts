/* tslint:disable */
/* eslint-disable */
/*
Sumsub API

Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.

Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TokenApi - axios parameter creator
 * @export
 */
export const TokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an applicant action token.
         * @summary Generate access token
         * @param {string} userId An external user ID which will be bound to the token.
         * @param {string} externalActionId An external action ID which will be bound to the token.
         * @param {string} levelName The name of the [verification level](https://docs.sumsub.com/reference).
         * @param {string} [ttlInSecs] A lifespan of a token in seconds. Default value is 10 mins.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createActionToken: async (userId: string, externalActionId: string, levelName: string, ttlInSecs?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('createActionToken', 'userId', userId)
            // verify required parameter 'externalActionId' is not null or undefined
            assertParamExists('createActionToken', 'externalActionId', externalActionId)
            // verify required parameter 'levelName' is not null or undefined
            assertParamExists('createActionToken', 'levelName', levelName)
            const localVarPath = `/resources/accessTokens`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-App-Token", keyParamName: "sec0", configuration })
            if (ttlInSecs !== undefined) {
                localVarQueryParameter['ttlInSecs'] = ttlInSecs;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (externalActionId !== undefined) {
                localVarQueryParameter['externalActionId'] = externalActionId;
            }

            if (levelName !== undefined) {
                localVarQueryParameter['levelName'] = levelName;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resources/accessTokens',
                httpMethod: 'POST'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns available tokens.
         * @summary Get available tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableCurrencies: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/resources/standalone/crypto/availableCurrencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-App-Token", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resources/standalone/crypto/availableCurrencies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokenApi - functional programming interface
 * @export
 */
export const TokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TokenApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates an applicant action token.
         * @summary Generate access token
         * @param {TokenApiCreateActionTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createActionToken(requestParameters: TokenApiCreateActionTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createActionToken(requestParameters.userId, requestParameters.externalActionId, requestParameters.levelName, requestParameters.ttlInSecs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns available tokens.
         * @summary Get available tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableCurrencies(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableCurrencies(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TokenApi - factory interface
 * @export
 */
export const TokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TokenApiFp(configuration)
    return {
        /**
         * Creates an applicant action token.
         * @summary Generate access token
         * @param {TokenApiCreateActionTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createActionToken(requestParameters: TokenApiCreateActionTokenRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createActionToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns available tokens.
         * @summary Get available tokens
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableCurrencies(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getAvailableCurrencies(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createActionToken operation in TokenApi.
 * @export
 * @interface TokenApiCreateActionTokenRequest
 */
export type TokenApiCreateActionTokenRequest = {
    
    /**
    * An external user ID which will be bound to the token.
    * @type {string}
    * @memberof TokenApiCreateActionToken
    */
    readonly userId: string
    
    /**
    * An external action ID which will be bound to the token.
    * @type {string}
    * @memberof TokenApiCreateActionToken
    */
    readonly externalActionId: string
    
    /**
    * The name of the [verification level](https://docs.sumsub.com/reference).
    * @type {string}
    * @memberof TokenApiCreateActionToken
    */
    readonly levelName: string
    
    /**
    * A lifespan of a token in seconds. Default value is 10 mins.
    * @type {string}
    * @memberof TokenApiCreateActionToken
    */
    readonly ttlInSecs?: string
    
}

/**
 * TokenApiGenerated - object-oriented interface
 * @export
 * @class TokenApiGenerated
 * @extends {BaseAPI}
 */
export class TokenApiGenerated extends BaseAPI {
    /**
     * Creates an applicant action token.
     * @summary Generate access token
     * @param {TokenApiCreateActionTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApiGenerated
     */
    public createActionToken(requestParameters: TokenApiCreateActionTokenRequest, options?: AxiosRequestConfig) {
        return TokenApiFp(this.configuration).createActionToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns available tokens.
     * @summary Get available tokens
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApiGenerated
     */
    public getAvailableCurrencies(options?: AxiosRequestConfig) {
        return TokenApiFp(this.configuration).getAvailableCurrencies(options).then((request) => request(this.axios, this.basePath));
    }
}
