/* tslint:disable */
/* eslint-disable */
/*
Sumsub API

Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.

Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * VASPApi - axios parameter creator
 * @export
 */
export const VASPApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a list of VASPs from the Sumsub VASP directory.
         * @summary Get available VASPs
         * @param {number} [limit] Maximum number of the VASPs to be returned. The maximum recommended value you can set is 100.
         * @param {number} [offset] Offset of the VASPs to be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableVasps: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/resources/vasps/-`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-App-Token", keyParamName: "sec0", configuration })
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resources/vasps/-',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VASPApi - functional programming interface
 * @export
 */
export const VASPApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VASPApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a list of VASPs from the Sumsub VASP directory.
         * @summary Get available VASPs
         * @param {VASPApiGetAvailableVaspsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAvailableVasps(requestParameters: VASPApiGetAvailableVaspsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAvailableVasps(requestParameters.limit, requestParameters.offset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VASPApi - factory interface
 * @export
 */
export const VASPApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VASPApiFp(configuration)
    return {
        /**
         * Returns a list of VASPs from the Sumsub VASP directory.
         * @summary Get available VASPs
         * @param {VASPApiGetAvailableVaspsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableVasps(requestParameters: VASPApiGetAvailableVaspsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.getAvailableVasps(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAvailableVasps operation in VASPApi.
 * @export
 * @interface VASPApiGetAvailableVaspsRequest
 */
export type VASPApiGetAvailableVaspsRequest = {
    
    /**
    * Maximum number of the VASPs to be returned. The maximum recommended value you can set is 100.
    * @type {number}
    * @memberof VASPApiGetAvailableVasps
    */
    readonly limit?: number
    
    /**
    * Offset of the VASPs to be returned.
    * @type {number}
    * @memberof VASPApiGetAvailableVasps
    */
    readonly offset?: number
    
}

/**
 * VASPApiGenerated - object-oriented interface
 * @export
 * @class VASPApiGenerated
 * @extends {BaseAPI}
 */
export class VASPApiGenerated extends BaseAPI {
    /**
     * Returns a list of VASPs from the Sumsub VASP directory.
     * @summary Get available VASPs
     * @param {VASPApiGetAvailableVaspsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VASPApiGenerated
     */
    public getAvailableVasps(requestParameters: VASPApiGetAvailableVaspsRequest = {}, options?: AxiosRequestConfig) {
        return VASPApiFp(this.configuration).getAvailableVasps(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
