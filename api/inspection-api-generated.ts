/* tslint:disable */
/* eslint-disable */
/*
Sumsub API

Sumsub is the one verification platform to secure the whole user journey. With Sumsub's customizable KYC, KYB, transaction monitoring and fraud prevention solutions, you can orchestrate your verification process, welcome more customers worldwide, meet compliance requirements, reduce costs and protect your business.

Sumsub has over 2,000 clients in fintech, crypto, transportation, trading, e-commerce and gaming industries including Binance, Wirex, Avis, Bybit, Huobi, Unlimit, Flutter, Kaizen Gaming, and TransferGo.

The version of the OpenAPI document: 1.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { fromBuffer } from "file-type/browser"
const FormData = require("form-data")
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * InspectionApi - axios parameter creator
 * @export
 */
export const InspectionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the video call results.
         * @summary Get video call data
         * @param {string} inspectionId A unique inspection identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoIdentData: async (inspectionId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'inspectionId' is not null or undefined
            assertParamExists('getVideoIdentData', 'inspectionId', inspectionId)
            const localVarPath = `/resources/inspections/{inspectionId}?fields=videoIdentData`
                .replace(`{${"inspectionId"}}`, encodeURIComponent(String(inspectionId !== undefined ? inspectionId : `-inspectionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "X-App-Token", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/resources/inspections/{inspectionId}?fields=videoIdentData',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InspectionApi - functional programming interface
 * @export
 */
export const InspectionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InspectionApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the video call results.
         * @summary Get video call data
         * @param {InspectionApiGetVideoIdentDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVideoIdentData(requestParameters: InspectionApiGetVideoIdentDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVideoIdentData(requestParameters.inspectionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InspectionApi - factory interface
 * @export
 */
export const InspectionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InspectionApiFp(configuration)
    return {
        /**
         * Returns the video call results.
         * @summary Get video call data
         * @param {InspectionApiGetVideoIdentDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVideoIdentData(requestParameters: InspectionApiGetVideoIdentDataRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.getVideoIdentData(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getVideoIdentData operation in InspectionApi.
 * @export
 * @interface InspectionApiGetVideoIdentDataRequest
 */
export type InspectionApiGetVideoIdentDataRequest = {
    
    /**
    * A unique inspection identifier.
    * @type {string}
    * @memberof InspectionApiGetVideoIdentData
    */
    readonly inspectionId: string
    
}

/**
 * InspectionApiGenerated - object-oriented interface
 * @export
 * @class InspectionApiGenerated
 * @extends {BaseAPI}
 */
export class InspectionApiGenerated extends BaseAPI {
    /**
     * Returns the video call results.
     * @summary Get video call data
     * @param {InspectionApiGetVideoIdentDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InspectionApiGenerated
     */
    public getVideoIdentData(requestParameters: InspectionApiGetVideoIdentDataRequest, options?: AxiosRequestConfig) {
        return InspectionApiFp(this.configuration).getVideoIdentData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
